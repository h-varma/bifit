window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "bifit", "modulename": "bifit", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "bifit.continuation", "modulename": "bifit.continuation", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "bifit.continuation.base_continuer", "modulename": "bifit.continuation.base_continuer", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "bifit.continuation.base_continuer.Continuer", "modulename": "bifit.continuation.base_continuer", "qualname": "Continuer", "kind": "class", "doc": "<p>Continuer interface, not functional on its own.</p>\n\n<p>The continuer takes a non-linear system, a known solution, and a parameter range and continues the solution.\nIt returns the ContinuationSolution object.</p>\n"}, {"fullname": "bifit.continuation.base_continuer.Continuer.__init__", "modulename": "bifit.continuation.base_continuer", "qualname": "Continuer.__init__", "kind": "function", "doc": "<p>Initialize the deflated continuation method.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>func (callable):</strong>  Function of x and p.</li>\n<li><strong>x0 (np.ndarray):</strong>  Initial guess.</li>\n<li><strong>p0 (float, optional):</strong>  Initial value of the parameter. Defaults to np.nan.</li>\n<li><strong>p_min (float, optional):</strong>  Minimum value of the parameter. Defaults to 0.</li>\n<li><strong>p_max (float, optional):</strong>  Maximum value of the parameter. Defaults to np.inf.</li>\n<li><strong>p_step (float, optional):</strong>  Step size of the parameter. Defaults to 1.</li>\n<li><strong>p_idx (int, optional):</strong>  Index of the parameter in the input to <code>func</code>. Defaults to -1.</li>\n<li><strong>data (np.ndarray, optional):</strong>  Data points to trace. Defaults to None.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">func</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"nb\">callable</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">x0</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">p0</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"n\">nan</span>,</span><span class=\"param\">\t<span class=\"n\">p_min</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">p_max</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"n\">inf</span>,</span><span class=\"param\">\t<span class=\"n\">p_step</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">p_idx</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "bifit.continuation.base_continuer.Continuer.func", "modulename": "bifit.continuation.base_continuer", "qualname": "Continuer.func", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.continuation.base_continuer.Continuer.x0", "modulename": "bifit.continuation.base_continuer", "qualname": "Continuer.x0", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.continuation.base_continuer.Continuer.p0", "modulename": "bifit.continuation.base_continuer", "qualname": "Continuer.p0", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.continuation.base_continuer.Continuer.p_min", "modulename": "bifit.continuation.base_continuer", "qualname": "Continuer.p_min", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.continuation.base_continuer.Continuer.p_max", "modulename": "bifit.continuation.base_continuer", "qualname": "Continuer.p_max", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.continuation.base_continuer.Continuer.p_step", "modulename": "bifit.continuation.base_continuer", "qualname": "Continuer.p_step", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.continuation.base_continuer.Continuer.p_idx", "modulename": "bifit.continuation.base_continuer", "qualname": "Continuer.p_idx", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.continuation.base_continuer.Continuer.data", "modulename": "bifit.continuation.base_continuer", "qualname": "Continuer.data", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.continuation.base_continuer.Continuer.flag", "modulename": "bifit.continuation.base_continuer", "qualname": "Continuer.flag", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.continuation.deflated_continuation", "modulename": "bifit.continuation.deflated_continuation", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "bifit.continuation.deflated_continuation.rng", "modulename": "bifit.continuation.deflated_continuation", "qualname": "rng", "kind": "variable", "doc": "<p></p>\n", "default_value": "Generator(PCG64) at 0x2B20D611A80"}, {"fullname": "bifit.continuation.deflated_continuation.DeflatedContinuation", "modulename": "bifit.continuation.deflated_continuation", "qualname": "DeflatedContinuation", "kind": "class", "doc": "<p>Implements the deflated continuation method.</p>\n", "bases": "bifit.continuation.base_continuer.Continuer"}, {"fullname": "bifit.continuation.deflated_continuation.DeflatedContinuation.__init__", "modulename": "bifit.continuation.deflated_continuation", "qualname": "DeflatedContinuation.__init__", "kind": "function", "doc": "<p>Initialize the deflated continuation method.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>func (callable):</strong>  Function of x and p.</li>\n<li><strong>x0 (np.ndarray):</strong>  Initial guess.</li>\n<li><strong>p0 (float, optional):</strong>  Initial value of the parameter. Defaults to np.nan.</li>\n<li><strong>p_min (float, optional):</strong>  Minimum value of the parameter. Defaults to 0.</li>\n<li><strong>p_max (float, optional):</strong>  Maximum value of the parameter. Defaults to np.inf.</li>\n<li><strong>p_step (float, optional):</strong>  Step size of the parameter. Defaults to 1.</li>\n<li><strong>p_idx (int, optional):</strong>  Index of the parameter in the input to <code>func</code>. Defaults to None.</li>\n<li><strong>max_failed_attempts (int, optional):</strong>  Maximum number of failed attempts with deflation. Defaults to 3.</li>\n<li><strong>unique_indices (np.ndarray, optional):</strong>  Indices of variables to use for deflation. Defaults to None.</li>\n<li><strong>data (np.ndarray, optional):</strong>  Data points to trace. Defaults to None.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">func</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"nb\">callable</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">x0</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">p0</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"n\">nan</span>,</span><span class=\"param\">\t<span class=\"n\">p_min</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">p_max</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"n\">inf</span>,</span><span class=\"param\">\t<span class=\"n\">p_step</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">p_idx</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">max_failed_attempts</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>,</span><span class=\"param\">\t<span class=\"n\">unique_indices</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "bifit.continuation.deflated_continuation.DeflatedContinuation.init_step", "modulename": "bifit.continuation.deflated_continuation", "qualname": "DeflatedContinuation.init_step", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.continuation.deflated_continuation.DeflatedContinuation.adaptive_steps", "modulename": "bifit.continuation.deflated_continuation", "qualname": "DeflatedContinuation.adaptive_steps", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.continuation.deflated_continuation.DeflatedContinuation.unique_indices", "modulename": "bifit.continuation.deflated_continuation", "qualname": "DeflatedContinuation.unique_indices", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.continuation.deflated_continuation.DeflatedContinuation.max_failed_attempts", "modulename": "bifit.continuation.deflated_continuation", "qualname": "DeflatedContinuation.max_failed_attempts", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.continuation.deflated_continuation.DeflatedContinuation.bifurcations_found", "modulename": "bifit.continuation.deflated_continuation", "qualname": "DeflatedContinuation.bifurcations_found", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.continuation.deflated_continuation.DeflatedContinuation.jacobian_", "modulename": "bifit.continuation.deflated_continuation", "qualname": "DeflatedContinuation.jacobian_", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.continuation.deflated_continuation.DeflatedContinuation.parameters", "modulename": "bifit.continuation.deflated_continuation", "qualname": "DeflatedContinuation.parameters", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.continuation.deflated_continuation.DeflatedContinuation.solutions", "modulename": "bifit.continuation.deflated_continuation", "qualname": "DeflatedContinuation.solutions", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.continuation.deflated_continuation.DeflatedContinuation.detect_saddle_node_bifurcation", "modulename": "bifit.continuation.deflated_continuation", "qualname": "DeflatedContinuation.detect_saddle_node_bifurcation", "kind": "function", "doc": "<p>Detect saddle-node bifurcation branches in the solutions.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>parameter (str):</strong>  Name of bifurcation parameter.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>np.ndarray: Saddle-node bifurcation point.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">parameter</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "bifit.continuation.deflated_continuation.DeflatedContinuation.detect_hopf_bifurcation", "modulename": "bifit.continuation.deflated_continuation", "qualname": "DeflatedContinuation.detect_hopf_bifurcation", "kind": "function", "doc": "<p>Detect Hopf bifurcation points in the solutions.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>parameter (str):</strong>  Name of bifurcation parameter.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>np.ndarray: Hopf bifurcation point.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">parameter</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "bifit.continuation.pseudo_arclength", "modulename": "bifit.continuation.pseudo_arclength", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "bifit.continuation.pseudo_arclength.PseudoArclengthContinuation", "modulename": "bifit.continuation.pseudo_arclength", "qualname": "PseudoArclengthContinuation", "kind": "class", "doc": "<p>Implements the pseudo-arclength continuation method.</p>\n", "bases": "bifit.continuation.base_continuer.Continuer"}, {"fullname": "bifit.continuation.pseudo_arclength.PseudoArclengthContinuation.__init__", "modulename": "bifit.continuation.pseudo_arclength", "qualname": "PseudoArclengthContinuation.__init__", "kind": "function", "doc": "<p>Initialize the pseudo-arclength continuation method.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>func (callable):</strong>  Function of x and p.</li>\n<li><strong>x0 (np.ndarray):</strong>  Initial guess.</li>\n<li><strong>p0 (float, optional):</strong>  Initial value of the parameter. Defaults to np.nan.</li>\n<li><strong>p_min (float, optional):</strong>  Minimum value of the parameter. Defaults to -np.inf.</li>\n<li><strong>p_max (float, optional):</strong>  Maximum value of the parameter. Defaults to np.inf.</li>\n<li><strong>p_step (float, optional):</strong>  Step size of the parameter. Defaults to 1.</li>\n<li><strong>p_idx (int, optional):</strong>  Index of the parameter in the input to <code>func</code>. Defaults to -1.</li>\n<li><strong>max_iters (int, optional):</strong>  Maximum number of predictor-corrector iterations. Defaults to 500.</li>\n<li><strong>max_newton_iters (int, optional):</strong>  Maximum number of iterations for Newton corrector. Defaults to 10.</li>\n<li><strong>newton_fun_tol (float, optional):</strong>  Function tolerance for Newton corrector. Defaults to 1e-4.</li>\n<li><strong>newton_var_tol (float, optional):</strong>  Variable step tolerance for Newton corrector. Defaults to 1e-4.</li>\n<li><strong>fast_iters (int, optional):</strong>  Number of optimizer iterations for fast convergence. Defaults to 3.</li>\n<li><strong>data (np.ndarray, optional):</strong>  Data points to trace. Defaults to None.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">func</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"nb\">callable</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">x0</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">p0</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"n\">nan</span>,</span><span class=\"param\">\t<span class=\"n\">p_min</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"n\">inf</span>,</span><span class=\"param\">\t<span class=\"n\">p_max</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"n\">inf</span>,</span><span class=\"param\">\t<span class=\"n\">p_step</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">p_idx</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">max_iters</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">500</span>,</span><span class=\"param\">\t<span class=\"n\">max_newton_iters</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">newton_fun_tol</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0001</span>,</span><span class=\"param\">\t<span class=\"n\">newton_var_tol</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0001</span>,</span><span class=\"param\">\t<span class=\"n\">fast_iters</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>,</span><span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "bifit.continuation.pseudo_arclength.PseudoArclengthContinuation.max_iters", "modulename": "bifit.continuation.pseudo_arclength", "qualname": "PseudoArclengthContinuation.max_iters", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.continuation.pseudo_arclength.PseudoArclengthContinuation.max_newton_iters", "modulename": "bifit.continuation.pseudo_arclength", "qualname": "PseudoArclengthContinuation.max_newton_iters", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.continuation.pseudo_arclength.PseudoArclengthContinuation.newton_fun_tol", "modulename": "bifit.continuation.pseudo_arclength", "qualname": "PseudoArclengthContinuation.newton_fun_tol", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.continuation.pseudo_arclength.PseudoArclengthContinuation.newton_var_tol", "modulename": "bifit.continuation.pseudo_arclength", "qualname": "PseudoArclengthContinuation.newton_var_tol", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.continuation.pseudo_arclength.PseudoArclengthContinuation.fast_iters", "modulename": "bifit.continuation.pseudo_arclength", "qualname": "PseudoArclengthContinuation.fast_iters", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.continuation.pseudo_arclength.PseudoArclengthContinuation.parameters", "modulename": "bifit.continuation.pseudo_arclength", "qualname": "PseudoArclengthContinuation.parameters", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.continuation.pseudo_arclength.PseudoArclengthContinuation.solutions", "modulename": "bifit.continuation.pseudo_arclength", "qualname": "PseudoArclengthContinuation.solutions", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.continuation.select_continuer", "modulename": "bifit.continuation.select_continuer", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "bifit.continuation.select_continuer.import_continuer", "modulename": "bifit.continuation.select_continuer", "qualname": "import_continuer", "kind": "function", "doc": "<p>Import a continuation method of choice.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>method (str):</strong>  Name of the continuation method.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>object: Continuation object.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>ValueError:</strong>  If the continuation method is unknown.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">method</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bifit.initial_guess", "modulename": "bifit.initial_guess", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "bifit.initial_guess.bifurcation_point", "modulename": "bifit.initial_guess.bifurcation_point", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "bifit.initial_guess.bifurcation_point.get_bifurcation_point", "modulename": "bifit.initial_guess.bifurcation_point", "qualname": "get_bifurcation_point", "kind": "function", "doc": "<p>Gets the exact bifurcation point from an approximation.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>branch (np.ndarray):</strong>  Bifurcation point approximation from the branches.</li>\n<li><strong>model (object):</strong>  Model details.</li>\n<li><strong>optimizer_name (str):</strong>  Name of the local optimizer.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>np.ndarray: Exact bifurcation point.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>ValueError:</strong>  If the bifurcation type is unrecognized.</li>\n<li><strong>RuntimeError:</strong>  If the bifurcation point cannot be found.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">branch</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"nb\">object</span>,</span><span class=\"param\">\t<span class=\"n\">optimizer_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;scipy&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "bifit.initial_guess.match_solutions", "modulename": "bifit.initial_guess.match_solutions", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "bifit.initial_guess.match_solutions.match_solutions_to_data", "modulename": "bifit.initial_guess.match_solutions", "qualname": "match_solutions_to_data", "kind": "function", "doc": "<p>Matches the solutions of two-parameter continuation to the experimental data.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>model (object):</strong>  Details of the model.</li>\n<li><strong>solutions (list):</strong>  Solutions from the two-parameter continuation.</li>\n<li><strong>fill_missing (bool):</strong>  Whether to fill the missing data points.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>np.ndarray: Initial guess.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>RuntimeError:</strong>  If no solutions are found in the two-parameter continuation.</li>\n<li><strong>ValueError:</strong>  If more than 2 data points per homotopy parameter value are encountered.</li>\n<li><strong>AssertionError:</strong>  If matching solutions are not found for all data or if there is a mismatch\nbetween homotopy values in initial guesses and data.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"nb\">object</span>, </span><span class=\"param\"><span class=\"n\">solutions</span><span class=\"p\">:</span> <span class=\"nb\">list</span>, </span><span class=\"param\"><span class=\"n\">fill_missing</span><span class=\"p\">:</span> <span class=\"nb\">bool</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "bifit.initial_guess.match_solutions.get_parameter_value", "modulename": "bifit.initial_guess.match_solutions", "qualname": "get_parameter_value", "kind": "function", "doc": "<p>Gets the value of homotopy or free parameter from the solution array.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x (np.ndarray):</strong>  Solution array.</li>\n<li><strong>type_ (str):</strong>  Parameter type (\"h\" for homotopy, \"f\" for free).</li>\n<li><strong>model (object):</strong>  Details of the model.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>float: Parameter value.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>ValueError:</strong>  If the parameter type is unrecognized.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">type_</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"nb\">object</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "bifit.initial_guess.steady_state", "modulename": "bifit.initial_guess.steady_state", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "bifit.initial_guess.steady_state.find_steady_state", "modulename": "bifit.initial_guess.steady_state", "qualname": "find_steady_state", "kind": "function", "doc": "<p>Integrates and solves the model equations to get a steady state solution.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>model (object):</strong>  Instance of the Model object.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>tuple[np.ndarray, plt.Figure]: Steady state solution and the figure object.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>RuntimeError:</strong>  If the model equations cannot be solved to find the steady state.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"nb\">object</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">figure</span><span class=\"o\">.</span><span class=\"n\">Figure</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "bifit.initial_guess.steady_state_curve", "modulename": "bifit.initial_guess.steady_state_curve", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "bifit.initial_guess.steady_state_curve.compute_steady_state_curve", "modulename": "bifit.initial_guess.steady_state_curve", "qualname": "compute_steady_state_curve", "kind": "function", "doc": "<p>Draws a steady state curve starting from the steady state x0.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x0 (np.ndarray):</strong>  Starting point.</li>\n<li><strong>model (dataclass):</strong>  Details of the model.</li>\n<li><strong>continuer_name (str):</strong>  Continuation method.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>tuple[list[np.ndarray], plt.Figure]: Results of the continuation and the figure object.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>ValueError:</strong>  If the bifurcation type is unrecognized.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">x0</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">function</span> <span class=\"n\">dataclass</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">continuer_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;deflated&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">],</span> <span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">figure</span><span class=\"o\">.</span><span class=\"n\">Figure</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "bifit.initial_guess.trace_data", "modulename": "bifit.initial_guess.trace_data", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "bifit.initial_guess.trace_data.trace_measured_bifurcations", "modulename": "bifit.initial_guess.trace_data", "qualname": "trace_measured_bifurcations", "kind": "function", "doc": "<p>Continues the bifurcation point to draw a two-parameter bifurcation diagram.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x0 (np.ndarray):</strong>  Starting bifurcation point.</li>\n<li><strong>model (object):</strong>  Model details.</li>\n<li><strong>continuer_name (str):</strong>  Continuation method.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>tuple[np.ndarray, plt.Figure]: Set of bifurcation points in two parameters and the figure object.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">x0</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"nb\">object</span>,</span><span class=\"param\">\t<span class=\"n\">continuer_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;pseudo-arclength&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">figure</span><span class=\"o\">.</span><span class=\"n\">Figure</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "bifit.initial_guess.trace_data.attach_parameter", "modulename": "bifit.initial_guess.trace_data", "qualname": "attach_parameter", "kind": "function", "doc": "<p>Adds the homotopy parameter to the solution vector and plots it.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>p (float):</strong>  Homotopy parameter value.</li>\n<li><strong>s (np.ndarray):</strong>  Solution vector.</li>\n<li><strong>model (object):</strong>  Model details.</li>\n<li><strong>ax (plt.Axes):</strong>  Axis object.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>np.ndarray: Complete solution vector.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">p</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">s</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"nb\">object</span>,</span><span class=\"param\">\t<span class=\"n\">ax</span><span class=\"p\">:</span> <span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">axes</span><span class=\"o\">.</span><span class=\"n\">_axes</span><span class=\"o\">.</span><span class=\"n\">Axes</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "bifit.logging_", "modulename": "bifit.logging_", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "bifit.logging_.create_logger", "modulename": "bifit.logging_", "qualname": "create_logger", "kind": "function", "doc": "<p>Creates a logger object.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name (str):</strong>  Name of the logger.</li>\n<li><strong>level (int):</strong>  Logging level.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>logging.Logger: The logger object.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"mi\">20</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bifit.logging_.logger", "modulename": "bifit.logging_", "qualname": "logger", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger bifit.logging_ (INFO)&gt;"}, {"fullname": "bifit.models", "modulename": "bifit.models", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "bifit.models.base_model", "modulename": "bifit.models.base_model", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "bifit.models.base_model.BaseModel", "modulename": "bifit.models.base_model", "qualname": "BaseModel", "kind": "class", "doc": "<p>Base class for all models. This class is abstract and not functional on its own.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>data (Any):</strong>  Data associated with the model.</li>\n<li><strong>data_weights (Any):</strong>  Weights for the data.</li>\n<li><strong>mask (dict):</strong>  Mask indicating which components are active in the model.</li>\n</ul>\n", "bases": "abc.ABC"}, {"fullname": "bifit.models.base_model.BaseModel.__init__", "modulename": "bifit.models.base_model", "qualname": "BaseModel.__init__", "kind": "function", "doc": "<p>Initializes the BaseModel with default attributes.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "bifit.models.base_model.BaseModel.data", "modulename": "bifit.models.base_model", "qualname": "BaseModel.data", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.models.base_model.BaseModel.data_weights", "modulename": "bifit.models.base_model", "qualname": "BaseModel.data_weights", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.models.base_model.BaseModel.mask", "modulename": "bifit.models.base_model", "qualname": "BaseModel.mask", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.models.base_model.BaseModel.rhs_", "modulename": "bifit.models.base_model", "qualname": "BaseModel.rhs_", "kind": "function", "doc": "<p>Computes the right-hand side of the model equations.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x (np.ndarray):</strong>  Model state (and parameters).</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>np.ndarray: Right-hand side of the model equations.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "bifit.models.base_model.BaseModel.jacobian_", "modulename": "bifit.models.base_model", "qualname": "BaseModel.jacobian_", "kind": "function", "doc": "<p>Computes the Jacobian matrix of the model equations.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x (np.ndarray):</strong>  Model state (and parameters).</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>np.ndarray: Jacobian matrix of the model equations.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "bifit.models.base_model.BaseModel.set_parameters", "modulename": "bifit.models.base_model", "qualname": "BaseModel.set_parameters", "kind": "function", "doc": "<p>Generates random initial guesses for the variable parameters and controls.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>controls (dict):</strong>  Control parameters from the data.</li>\n<li><strong>parameters (np.ndarray):</strong>  Sample from the parameter space.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">controls</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">parameters</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bifit.models.specifications", "modulename": "bifit.models.specifications", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "bifit.models.specifications.ProblemSpecifications", "modulename": "bifit.models.specifications", "qualname": "ProblemSpecifications", "kind": "class", "doc": "<p>Represents the specifications of a problem for a mathematical model.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>name (str):</strong>  Name of the problem.</li>\n<li><strong>compartments (list[str]):</strong>  List of compartments in the model.</li>\n<li><strong>to_plot (str):</strong>  Variable to plot.</li>\n<li><strong>true_parameters (dict[str, float]):</strong>  True parameter values.</li>\n<li><strong>initial_parameters (dict[str, float]):</strong>  Initial guesses for parameters.</li>\n<li><strong>parameters (dict[str, dict[str, float]]):</strong>  Parameter details.</li>\n<li><strong>controls (dict[str, str]):</strong>  Control variables.</li>\n<li><strong>global_parameters (list[str]):</strong>  List of global parameters.</li>\n<li><strong>initial_state (np.ndarray):</strong>  Initial state of the model.</li>\n<li><strong>integration_interval (list[float]):</strong>  Time interval for integration.</li>\n<li><strong>bifurcation_type (str):</strong>  Type of bifurcation (e.g., \"saddle-node\", \"hopf\").</li>\n<li><strong>continuation_settings (dict[str, float]):</strong>  Settings for continuation analysis.</li>\n<li><strong>two_parameter_continuation_method (str):</strong>  Method for two-parameter continuation.</li>\n<li><strong>measurement_error (str):</strong>  Type of measurement error.</li>\n<li><strong>exclude_states (list[np.ndarray]):</strong>  States to exclude from analysis.</li>\n<li><strong>multi_experiment_line_search (str):</strong>  Line search method for multi-experiment analysis.</li>\n</ul>\n"}, {"fullname": "bifit.models.specifications.ProblemSpecifications.__init__", "modulename": "bifit.models.specifications", "qualname": "ProblemSpecifications.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">compartments</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">to_plot</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">true_parameters</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">initial_parameters</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">parameters</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">controls</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">global_parameters</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">initial_state</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">integration_interval</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">bifurcation_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">continuation_settings</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">two_parameter_continuation_method</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">measurement_error</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">exclude_states</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">multi_experiment_line_search</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, {"fullname": "bifit.models.specifications.ProblemSpecifications.name", "modulename": "bifit.models.specifications", "qualname": "ProblemSpecifications.name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "bifit.models.specifications.ProblemSpecifications.compartments", "modulename": "bifit.models.specifications", "qualname": "ProblemSpecifications.compartments", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list[str]"}, {"fullname": "bifit.models.specifications.ProblemSpecifications.to_plot", "modulename": "bifit.models.specifications", "qualname": "ProblemSpecifications.to_plot", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "bifit.models.specifications.ProblemSpecifications.true_parameters", "modulename": "bifit.models.specifications", "qualname": "ProblemSpecifications.true_parameters", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict[str, float]"}, {"fullname": "bifit.models.specifications.ProblemSpecifications.initial_parameters", "modulename": "bifit.models.specifications", "qualname": "ProblemSpecifications.initial_parameters", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict[str, float]"}, {"fullname": "bifit.models.specifications.ProblemSpecifications.parameters", "modulename": "bifit.models.specifications", "qualname": "ProblemSpecifications.parameters", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict[str, dict[str, float]]"}, {"fullname": "bifit.models.specifications.ProblemSpecifications.controls", "modulename": "bifit.models.specifications", "qualname": "ProblemSpecifications.controls", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict[str, str]"}, {"fullname": "bifit.models.specifications.ProblemSpecifications.global_parameters", "modulename": "bifit.models.specifications", "qualname": "ProblemSpecifications.global_parameters", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list[str]"}, {"fullname": "bifit.models.specifications.ProblemSpecifications.initial_state", "modulename": "bifit.models.specifications", "qualname": "ProblemSpecifications.initial_state", "kind": "variable", "doc": "<p></p>\n", "annotation": ": numpy.ndarray"}, {"fullname": "bifit.models.specifications.ProblemSpecifications.integration_interval", "modulename": "bifit.models.specifications", "qualname": "ProblemSpecifications.integration_interval", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list[float]"}, {"fullname": "bifit.models.specifications.ProblemSpecifications.bifurcation_type", "modulename": "bifit.models.specifications", "qualname": "ProblemSpecifications.bifurcation_type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "bifit.models.specifications.ProblemSpecifications.continuation_settings", "modulename": "bifit.models.specifications", "qualname": "ProblemSpecifications.continuation_settings", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict[str, float]"}, {"fullname": "bifit.models.specifications.ProblemSpecifications.two_parameter_continuation_method", "modulename": "bifit.models.specifications", "qualname": "ProblemSpecifications.two_parameter_continuation_method", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "bifit.models.specifications.ProblemSpecifications.measurement_error", "modulename": "bifit.models.specifications", "qualname": "ProblemSpecifications.measurement_error", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "bifit.models.specifications.ProblemSpecifications.exclude_states", "modulename": "bifit.models.specifications", "qualname": "ProblemSpecifications.exclude_states", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list[numpy.ndarray]"}, {"fullname": "bifit.models.specifications.ProblemSpecifications.multi_experiment_line_search", "modulename": "bifit.models.specifications", "qualname": "ProblemSpecifications.multi_experiment_line_search", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "bifit.models.utils", "modulename": "bifit.models.utils", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "bifit.models.utils.nparray_to_dict", "modulename": "bifit.models.utils", "qualname": "nparray_to_dict", "kind": "function", "doc": "<p>Converts a numpy array into dictionaries for compartments, parameters, and auxiliary variables.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x (np.ndarray):</strong>  Model state as a numpy array.</li>\n<li><strong>model (object):</strong>  Model information, parameters, and settings.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Tuple[dict, dict, dict]: A tuple containing:\n      - c (dict): Compartments.\n      - p (dict): Parameters.\n      - h (dict): Auxiliary variables.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"nb\">object</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "bifit.models.utils.dict_to_nparray", "modulename": "bifit.models.utils", "qualname": "dict_to_nparray", "kind": "function", "doc": "<p>Converts dictionaries for compartments, parameters, and auxiliary variables into a numpy array.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>c (Union[dict, List[dict]]):</strong>  Model states.</li>\n<li><strong>p (Union[dict, List[dict]]):</strong>  Parameter values.</li>\n<li><strong>h (Union[dict, List[dict]]):</strong>  Auxiliary variable values.</li>\n<li><strong>model (object):</strong>  Details of the model.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>np.ndarray: A numpy array representing the model state.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">c</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">p</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">h</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"nb\">object</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "bifit.models.utils.assign_auxiliary_variables", "modulename": "bifit.models.utils", "qualname": "assign_auxiliary_variables", "kind": "function", "doc": "<p>Assigns auxiliary variables based on the model's bifurcation type.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x (Union[np.ndarray, dict]):</strong>  Input data, either as a numpy array or dictionary.</li>\n<li><strong>model (object):</strong>  Model information and settings.</li>\n<li><strong>idx (int, optional):</strong>  Starting index for slicing. Defaults to 0.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Union[np.ndarray, dict]: Auxiliary variables as a numpy array or dictionary.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"nb\">object</span>,</span><span class=\"param\">\t<span class=\"n\">idx</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "bifit.optimization", "modulename": "bifit.optimization", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "bifit.optimization.check_regularity", "modulename": "bifit.optimization.check_regularity", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "bifit.optimization.check_regularity.check_positive_definiteness", "modulename": "bifit.optimization.check_regularity", "qualname": "check_positive_definiteness", "kind": "function", "doc": "<p>Checks if the matrix has full column rank.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>J (np.ndarray):</strong>  Matrix to check.</li>\n<li><strong>tol (float, optional):</strong>  Singular value tolerance. Defaults to 1e-6.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: True if the matrix has full column rank, False otherwise.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">J</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">tol</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">1e-06</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "bifit.optimization.check_regularity.check_constraint_qualification", "modulename": "bifit.optimization.check_regularity", "qualname": "check_constraint_qualification", "kind": "function", "doc": "<p>Checks if the matrix has full row rank.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>J (np.ndarray):</strong>  Matrix to check.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: True if the matrix has full row rank.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>Exception:</strong>  If the constraint qualification (CQ) fails.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">J</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "bifit.optimization.line_search", "modulename": "bifit.optimization.line_search", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "bifit.optimization.line_search.line_search", "modulename": "bifit.optimization.line_search", "qualname": "line_search", "kind": "function", "doc": "<p>Find the step length using the line search.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x (np.ndarray):</strong>  Current point.</li>\n<li><strong>dx (np.ndarray):</strong>  Search direction.</li>\n<li><strong>func (callable):</strong>  Objective function.</li>\n<li><strong>strategy (str):</strong>  Line search strategy.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>float: Step length.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>ValueError:</strong>  If the specified line search strategy is not supported.</li>\n<li><strong>AssertionError:</strong>  If the exact line search does not converge.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">dx</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">func</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"nb\">callable</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">strategy</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "bifit.optimization.multi_experiment", "modulename": "bifit.optimization.multi_experiment", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "bifit.optimization.multi_experiment.base_optimizer", "modulename": "bifit.optimization.multi_experiment.base_optimizer", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "bifit.optimization.multi_experiment.base_optimizer.BaseMultiExperimentOptimizer", "modulename": "bifit.optimization.multi_experiment.base_optimizer", "qualname": "BaseMultiExperimentOptimizer", "kind": "class", "doc": "<p>Interface for multi-experiment optimizers. Not functional on its own.</p>\n", "bases": "bifit.optimization.single_experiment.base_optimizer.BaseOptimizer, abc.ABC"}, {"fullname": "bifit.optimization.multi_experiment.base_optimizer.BaseMultiExperimentOptimizer.__init__", "modulename": "bifit.optimization.multi_experiment.base_optimizer", "qualname": "BaseMultiExperimentOptimizer.__init__", "kind": "function", "doc": "<p>Initializes the optimizer.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "bifit.optimization.multi_experiment.base_optimizer.BaseMultiExperimentOptimizer.f", "modulename": "bifit.optimization.multi_experiment.base_optimizer", "qualname": "BaseMultiExperimentOptimizer.f", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.optimization.multi_experiment.base_optimizer.BaseMultiExperimentOptimizer.J", "modulename": "bifit.optimization.multi_experiment.base_optimizer", "qualname": "BaseMultiExperimentOptimizer.J", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.optimization.multi_experiment.base_optimizer.BaseMultiExperimentOptimizer.f1", "modulename": "bifit.optimization.multi_experiment.base_optimizer", "qualname": "BaseMultiExperimentOptimizer.f1", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.optimization.multi_experiment.base_optimizer.BaseMultiExperimentOptimizer.f2", "modulename": "bifit.optimization.multi_experiment.base_optimizer", "qualname": "BaseMultiExperimentOptimizer.f2", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.optimization.multi_experiment.base_optimizer.BaseMultiExperimentOptimizer.lagrange_multipliers", "modulename": "bifit.optimization.multi_experiment.base_optimizer", "qualname": "BaseMultiExperimentOptimizer.lagrange_multipliers", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.optimization.multi_experiment.base_optimizer.BaseMultiExperimentOptimizer.minimize", "modulename": "bifit.optimization.multi_experiment.base_optimizer", "qualname": "BaseMultiExperimentOptimizer.minimize", "kind": "function", "doc": "<p>Minimizes the objective function subject to equality constraints.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>line_search_strategy (str):</strong>  Name of the line search strategy.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>RuntimeError:</strong>  If an error occurs during Jacobian evaluation, solving the linearized system, or line search.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">line_search_strategy</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bifit.optimization.multi_experiment.base_optimizer.BaseMultiExperimentOptimizer.split_into_experiments", "modulename": "bifit.optimization.multi_experiment.base_optimizer", "qualname": "BaseMultiExperimentOptimizer.split_into_experiments", "kind": "function", "doc": "<p>Splits the solution vector into local experiments with common global parameters.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x (np.ndarray):</strong>  Solution vector.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>np.ndarray: Solution matrix with experiments as rows.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "bifit.optimization.multi_experiment.gauss_newton_optimizer", "modulename": "bifit.optimization.multi_experiment.gauss_newton_optimizer", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "bifit.optimization.multi_experiment.gauss_newton_optimizer.MultiExperimentGaussNewton", "modulename": "bifit.optimization.multi_experiment.gauss_newton_optimizer", "qualname": "MultiExperimentGaussNewton", "kind": "class", "doc": "<p>Solves multi-experiment non-linear optimization problems using the Gauss-Newton method.</p>\n\n<h6 id=\"reference\">Reference:</h6>\n\n<blockquote>\n  <p>Schl\u00f6der, Johannes P. \"Numerische Methoden zur Behandlung hochdimensionaler\n  Aufgaben der Parameteridentifizierung.\" (Dissertation) (1987).</p>\n</blockquote>\n", "bases": "bifit.optimization.multi_experiment.base_optimizer.BaseMultiExperimentOptimizer"}, {"fullname": "bifit.optimization.multi_experiment.gauss_newton_optimizer.MultiExperimentGaussNewton.__init__", "modulename": "bifit.optimization.multi_experiment.gauss_newton_optimizer", "qualname": "MultiExperimentGaussNewton.__init__", "kind": "function", "doc": "<p>Initializes the Gauss-Newton optimizer.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x0 (np.ndarray):</strong>  Initial guess.</li>\n<li><strong>f1_fun (callable):</strong>  Objective function.</li>\n<li><strong>f2_fun (callable):</strong>  Equality constraint.</li>\n<li><strong>n_local (int):</strong>  Number of local parameters.</li>\n<li><strong>n_global (int):</strong>  Number of global parameters.</li>\n<li><strong>n_observables (int):</strong>  Number of observables.</li>\n<li><strong>n_experiments (int):</strong>  Number of experiments.</li>\n<li><strong>xtol (float):</strong>  Convergence threshold for step size.</li>\n<li><strong>ftol (float):</strong>  Convergence threshold for function value.</li>\n<li><strong>max_iters (int):</strong>  Maximum number of iterations.</li>\n<li><strong>plot_iters (bool):</strong>  Whether to plot the level function at each iteration.</li>\n<li><strong>compute_ci (bool):</strong>  Whether to compute confidence intervals.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>AssertionError:</strong>  If no global parameters are found.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">x0</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">f1_fun</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"nb\">callable</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">f2_fun</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"nb\">callable</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">n_local</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">n_global</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">n_observables</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">n_experiments</span>,</span><span class=\"param\">\t<span class=\"n\">xtol</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.001</span>,</span><span class=\"param\">\t<span class=\"n\">ftol</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.001</span>,</span><span class=\"param\">\t<span class=\"n\">max_iters</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">100</span>,</span><span class=\"param\">\t<span class=\"n\">plot_iters</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">compute_ci</span><span class=\"o\">=</span><span class=\"kc\">False</span></span>)</span>"}, {"fullname": "bifit.optimization.multi_experiment.gauss_newton_optimizer.MultiExperimentGaussNewton.x0", "modulename": "bifit.optimization.multi_experiment.gauss_newton_optimizer", "qualname": "MultiExperimentGaussNewton.x0", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.optimization.multi_experiment.gauss_newton_optimizer.MultiExperimentGaussNewton.f1_fun", "modulename": "bifit.optimization.multi_experiment.gauss_newton_optimizer", "qualname": "MultiExperimentGaussNewton.f1_fun", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.optimization.multi_experiment.gauss_newton_optimizer.MultiExperimentGaussNewton.f2_fun", "modulename": "bifit.optimization.multi_experiment.gauss_newton_optimizer", "qualname": "MultiExperimentGaussNewton.f2_fun", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.optimization.multi_experiment.gauss_newton_optimizer.MultiExperimentGaussNewton.n_local", "modulename": "bifit.optimization.multi_experiment.gauss_newton_optimizer", "qualname": "MultiExperimentGaussNewton.n_local", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.optimization.multi_experiment.gauss_newton_optimizer.MultiExperimentGaussNewton.n_global", "modulename": "bifit.optimization.multi_experiment.gauss_newton_optimizer", "qualname": "MultiExperimentGaussNewton.n_global", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.optimization.multi_experiment.gauss_newton_optimizer.MultiExperimentGaussNewton.n_observables", "modulename": "bifit.optimization.multi_experiment.gauss_newton_optimizer", "qualname": "MultiExperimentGaussNewton.n_observables", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.optimization.multi_experiment.gauss_newton_optimizer.MultiExperimentGaussNewton.n_experiments", "modulename": "bifit.optimization.multi_experiment.gauss_newton_optimizer", "qualname": "MultiExperimentGaussNewton.n_experiments", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.optimization.multi_experiment.gauss_newton_optimizer.MultiExperimentGaussNewton.xtol", "modulename": "bifit.optimization.multi_experiment.gauss_newton_optimizer", "qualname": "MultiExperimentGaussNewton.xtol", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.optimization.multi_experiment.gauss_newton_optimizer.MultiExperimentGaussNewton.ftol", "modulename": "bifit.optimization.multi_experiment.gauss_newton_optimizer", "qualname": "MultiExperimentGaussNewton.ftol", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.optimization.multi_experiment.gauss_newton_optimizer.MultiExperimentGaussNewton.max_iters", "modulename": "bifit.optimization.multi_experiment.gauss_newton_optimizer", "qualname": "MultiExperimentGaussNewton.max_iters", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.optimization.multi_experiment.gauss_newton_optimizer.MultiExperimentGaussNewton.plot_iters", "modulename": "bifit.optimization.multi_experiment.gauss_newton_optimizer", "qualname": "MultiExperimentGaussNewton.plot_iters", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.optimization.multi_experiment.gauss_newton_optimizer.MultiExperimentGaussNewton.compute_ci", "modulename": "bifit.optimization.multi_experiment.gauss_newton_optimizer", "qualname": "MultiExperimentGaussNewton.compute_ci", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.optimization.multi_experiment.gauss_newton_optimizer.MultiExperimentGaussNewton.j1_fun", "modulename": "bifit.optimization.multi_experiment.gauss_newton_optimizer", "qualname": "MultiExperimentGaussNewton.j1_fun", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.optimization.multi_experiment.gauss_newton_optimizer.MultiExperimentGaussNewton.j2_fun", "modulename": "bifit.optimization.multi_experiment.gauss_newton_optimizer", "qualname": "MultiExperimentGaussNewton.j2_fun", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.optimization.multi_experiment.gauss_newton_optimizer.MultiExperimentGaussNewton.n_total_parameters", "modulename": "bifit.optimization.multi_experiment.gauss_newton_optimizer", "qualname": "MultiExperimentGaussNewton.n_total_parameters", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.optimization.multi_experiment.gauss_newton_optimizer.MultiExperimentGaussNewton.n_local_constr", "modulename": "bifit.optimization.multi_experiment.gauss_newton_optimizer", "qualname": "MultiExperimentGaussNewton.n_local_constr", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.optimization.multi_experiment.gauss_newton_optimizer.MultiExperimentGaussNewton.n_local_rows", "modulename": "bifit.optimization.multi_experiment.gauss_newton_optimizer", "qualname": "MultiExperimentGaussNewton.n_local_rows", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.optimization.multi_experiment.gauss_newton_optimizer.MultiExperimentGaussNewton.R", "modulename": "bifit.optimization.multi_experiment.gauss_newton_optimizer", "qualname": "MultiExperimentGaussNewton.R", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.optimization.multi_experiment.gauss_newton_optimizer.MultiExperimentGaussNewton.P", "modulename": "bifit.optimization.multi_experiment.gauss_newton_optimizer", "qualname": "MultiExperimentGaussNewton.P", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.optimization.multi_experiment.gauss_newton_optimizer.MultiExperimentGaussNewton.G", "modulename": "bifit.optimization.multi_experiment.gauss_newton_optimizer", "qualname": "MultiExperimentGaussNewton.G", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.optimization.multi_experiment.gauss_newton_optimizer.MultiExperimentGaussNewton.T_alpha_inv", "modulename": "bifit.optimization.multi_experiment.gauss_newton_optimizer", "qualname": "MultiExperimentGaussNewton.T_alpha_inv", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.optimization.multi_experiment.gauss_newton_optimizer.MultiExperimentGaussNewton.P_inv", "modulename": "bifit.optimization.multi_experiment.gauss_newton_optimizer", "qualname": "MultiExperimentGaussNewton.P_inv", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.optimization.multi_experiment.gauss_newton_optimizer.MultiExperimentGaussNewton.T_beta_inv", "modulename": "bifit.optimization.multi_experiment.gauss_newton_optimizer", "qualname": "MultiExperimentGaussNewton.T_beta_inv", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.optimization.multi_experiment.gauss_newton_optimizer.MultiExperimentGaussNewton.non_empty_rows", "modulename": "bifit.optimization.multi_experiment.gauss_newton_optimizer", "qualname": "MultiExperimentGaussNewton.non_empty_rows", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.optimization.multi_experiment.gauss_newton_optimizer.MultiExperimentGaussNewton.j1", "modulename": "bifit.optimization.multi_experiment.gauss_newton_optimizer", "qualname": "MultiExperimentGaussNewton.j1", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.optimization.multi_experiment.gauss_newton_optimizer.MultiExperimentGaussNewton.j2", "modulename": "bifit.optimization.multi_experiment.gauss_newton_optimizer", "qualname": "MultiExperimentGaussNewton.j2", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.optimization.multi_experiment.gauss_newton_optimizer.MultiExperimentGaussNewton.alpha", "modulename": "bifit.optimization.multi_experiment.gauss_newton_optimizer", "qualname": "MultiExperimentGaussNewton.alpha", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.optimization.multi_experiment.osqp_optimizer", "modulename": "bifit.optimization.multi_experiment.osqp_optimizer", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "bifit.optimization.multi_experiment.osqp_optimizer.MultiExperimentOSQP", "modulename": "bifit.optimization.multi_experiment.osqp_optimizer", "qualname": "MultiExperimentOSQP", "kind": "class", "doc": "<p>Solves multi-experiment non-linear optimization problems using OSQP.</p>\n\n<h6 id=\"reference\">Reference:</h6>\n\n<blockquote>\n  <p>Stellato, Bartolomeo, et al. \"OSQP: An operator splitting solver for quadratic programs.\"\n  Mathematical Programming Computation 12.4 (2020): 637-672.</p>\n</blockquote>\n", "bases": "bifit.optimization.multi_experiment.base_optimizer.BaseMultiExperimentOptimizer"}, {"fullname": "bifit.optimization.multi_experiment.osqp_optimizer.MultiExperimentOSQP.__init__", "modulename": "bifit.optimization.multi_experiment.osqp_optimizer", "qualname": "MultiExperimentOSQP.__init__", "kind": "function", "doc": "<p>Initializes the OSQP optimizer.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x0 (np.ndarray):</strong>  Initial guess.</li>\n<li><strong>f1_fun (callable):</strong>  Objective function.</li>\n<li><strong>f2_fun (callable):</strong>  Equality constraint.</li>\n<li><strong>n_local (int):</strong>  Number of local parameters.</li>\n<li><strong>n_global (int):</strong>  Number of global parameters.</li>\n<li><strong>n_observables (int):</strong>  Number of observables.</li>\n<li><strong>n_experiments (int):</strong>  Number of experiments.</li>\n<li><strong>xtol (float):</strong>  Convergence threshold for step size.</li>\n<li><strong>ftol (float):</strong>  Convergence threshold for function value.</li>\n<li><strong>max_iters (int):</strong>  Maximum number of iterations.</li>\n<li><strong>plot_iters (bool):</strong>  Whether to plot the level function at each iteration.</li>\n<li><strong>compute_ci (bool):</strong>  Whether to compute confidence intervals.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>AssertionError:</strong>  If no global parameters are found.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">x0</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">f1_fun</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"nb\">callable</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">f2_fun</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"nb\">callable</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">n_local</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">n_global</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">n_observables</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">n_experiments</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">xtol</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.001</span>,</span><span class=\"param\">\t<span class=\"n\">ftol</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.001</span>,</span><span class=\"param\">\t<span class=\"n\">max_iters</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">100</span>,</span><span class=\"param\">\t<span class=\"n\">plot_iters</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">compute_ci</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span>)</span>"}, {"fullname": "bifit.optimization.multi_experiment.osqp_optimizer.MultiExperimentOSQP.x0", "modulename": "bifit.optimization.multi_experiment.osqp_optimizer", "qualname": "MultiExperimentOSQP.x0", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.optimization.multi_experiment.osqp_optimizer.MultiExperimentOSQP.f1_fun", "modulename": "bifit.optimization.multi_experiment.osqp_optimizer", "qualname": "MultiExperimentOSQP.f1_fun", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.optimization.multi_experiment.osqp_optimizer.MultiExperimentOSQP.f2_fun", "modulename": "bifit.optimization.multi_experiment.osqp_optimizer", "qualname": "MultiExperimentOSQP.f2_fun", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.optimization.multi_experiment.osqp_optimizer.MultiExperimentOSQP.n_local", "modulename": "bifit.optimization.multi_experiment.osqp_optimizer", "qualname": "MultiExperimentOSQP.n_local", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.optimization.multi_experiment.osqp_optimizer.MultiExperimentOSQP.n_global", "modulename": "bifit.optimization.multi_experiment.osqp_optimizer", "qualname": "MultiExperimentOSQP.n_global", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.optimization.multi_experiment.osqp_optimizer.MultiExperimentOSQP.n_observables", "modulename": "bifit.optimization.multi_experiment.osqp_optimizer", "qualname": "MultiExperimentOSQP.n_observables", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.optimization.multi_experiment.osqp_optimizer.MultiExperimentOSQP.n_experiments", "modulename": "bifit.optimization.multi_experiment.osqp_optimizer", "qualname": "MultiExperimentOSQP.n_experiments", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.optimization.multi_experiment.osqp_optimizer.MultiExperimentOSQP.xtol", "modulename": "bifit.optimization.multi_experiment.osqp_optimizer", "qualname": "MultiExperimentOSQP.xtol", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.optimization.multi_experiment.osqp_optimizer.MultiExperimentOSQP.ftol", "modulename": "bifit.optimization.multi_experiment.osqp_optimizer", "qualname": "MultiExperimentOSQP.ftol", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.optimization.multi_experiment.osqp_optimizer.MultiExperimentOSQP.max_iters", "modulename": "bifit.optimization.multi_experiment.osqp_optimizer", "qualname": "MultiExperimentOSQP.max_iters", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.optimization.multi_experiment.osqp_optimizer.MultiExperimentOSQP.plot_iters", "modulename": "bifit.optimization.multi_experiment.osqp_optimizer", "qualname": "MultiExperimentOSQP.plot_iters", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.optimization.multi_experiment.osqp_optimizer.MultiExperimentOSQP.compute_ci", "modulename": "bifit.optimization.multi_experiment.osqp_optimizer", "qualname": "MultiExperimentOSQP.compute_ci", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.optimization.multi_experiment.osqp_optimizer.MultiExperimentOSQP.j1_fun", "modulename": "bifit.optimization.multi_experiment.osqp_optimizer", "qualname": "MultiExperimentOSQP.j1_fun", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.optimization.multi_experiment.osqp_optimizer.MultiExperimentOSQP.j2_fun", "modulename": "bifit.optimization.multi_experiment.osqp_optimizer", "qualname": "MultiExperimentOSQP.j2_fun", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.optimization.multi_experiment.osqp_optimizer.MultiExperimentOSQP.n_total_parameters", "modulename": "bifit.optimization.multi_experiment.osqp_optimizer", "qualname": "MultiExperimentOSQP.n_total_parameters", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.optimization.multi_experiment.osqp_optimizer.MultiExperimentOSQP.j1", "modulename": "bifit.optimization.multi_experiment.osqp_optimizer", "qualname": "MultiExperimentOSQP.j1", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.optimization.multi_experiment.osqp_optimizer.MultiExperimentOSQP.j2", "modulename": "bifit.optimization.multi_experiment.osqp_optimizer", "qualname": "MultiExperimentOSQP.j2", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.optimization.multi_experiment.osqp_optimizer.MultiExperimentOSQP.n_local_constr", "modulename": "bifit.optimization.multi_experiment.osqp_optimizer", "qualname": "MultiExperimentOSQP.n_local_constr", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.optimization.multi_experiment.osqp_optimizer.MultiExperimentOSQP.alpha", "modulename": "bifit.optimization.multi_experiment.osqp_optimizer", "qualname": "MultiExperimentOSQP.alpha", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.optimization.multi_experiment.select_optimizer", "modulename": "bifit.optimization.multi_experiment.select_optimizer", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "bifit.optimization.multi_experiment.select_optimizer.import_optimizer", "modulename": "bifit.optimization.multi_experiment.select_optimizer", "qualname": "import_optimizer", "kind": "function", "doc": "<p>Returns a single experiment optimizer.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>optimizer (str):</strong>  Name of the optimization method.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>object: Optimizer object.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>ValueError:</strong>  If the optimizer name is unknown.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">optimizer</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bifit.optimization.single_experiment", "modulename": "bifit.optimization.single_experiment", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "bifit.optimization.single_experiment.base_optimizer", "modulename": "bifit.optimization.single_experiment.base_optimizer", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "bifit.optimization.single_experiment.base_optimizer.BaseOptimizer", "modulename": "bifit.optimization.single_experiment.base_optimizer", "qualname": "BaseOptimizer", "kind": "class", "doc": "<p>Optimizer interface - not functional on its own.</p>\n", "bases": "abc.ABC"}, {"fullname": "bifit.optimization.single_experiment.base_optimizer.BaseOptimizer.__init__", "modulename": "bifit.optimization.single_experiment.base_optimizer", "qualname": "BaseOptimizer.__init__", "kind": "function", "doc": "<p>Initialize the optimizer.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "bifit.optimization.single_experiment.base_optimizer.BaseOptimizer.result", "modulename": "bifit.optimization.single_experiment.base_optimizer", "qualname": "BaseOptimizer.result", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.optimization.single_experiment.base_optimizer.BaseOptimizer.minimize", "modulename": "bifit.optimization.single_experiment.base_optimizer", "qualname": "BaseOptimizer.minimize", "kind": "function", "doc": "<p>Minimize the objective function subject to bounds and constraints.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>method (str, optional):</strong>  For consistency, non-functional for GaussNewton. Defaults to None.</li>\n<li><strong>options (dict, optional):</strong>  Solver options. Defaults to None.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>NotImplementedError:</strong>  If the method is not implemented.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">method</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">options</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bifit.optimization.single_experiment.base_optimizer.OptimizerResult", "modulename": "bifit.optimization.single_experiment.base_optimizer", "qualname": "OptimizerResult", "kind": "class", "doc": "<p>Optimizer result object.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>x (np.ndarray):</strong>  Solution of the optimizer.</li>\n<li><strong>success (bool):</strong>  Whether the optimizer has converged.</li>\n<li><strong>message (str):</strong>  Cause of termination.</li>\n<li><strong>func (np.ndarray):</strong>  Objective (or level) function at solution.</li>\n<li><strong>jac (np.ndarray):</strong>  Value of the Jacobian at the solution.</li>\n<li><strong>hess (np.ndarray):</strong>  Value of the Hessian at the solution.</li>\n<li><strong>hess_inv (np.ndarray):</strong>  Value of the Hessian inverse at the solution.</li>\n<li><strong>n_iters (int):</strong>  Number of iterations performed.</li>\n<li><strong>max_cv (float):</strong>  Maximum constraint violation.</li>\n<li><strong>level_functions (list):</strong>  List of level functions.</li>\n</ul>\n"}, {"fullname": "bifit.optimization.single_experiment.base_optimizer.OptimizerResult.x", "modulename": "bifit.optimization.single_experiment.base_optimizer", "qualname": "OptimizerResult.x", "kind": "variable", "doc": "<p></p>\n", "default_value": "None"}, {"fullname": "bifit.optimization.single_experiment.base_optimizer.OptimizerResult.success", "modulename": "bifit.optimization.single_experiment.base_optimizer", "qualname": "OptimizerResult.success", "kind": "variable", "doc": "<p></p>\n", "default_value": "False"}, {"fullname": "bifit.optimization.single_experiment.base_optimizer.OptimizerResult.message", "modulename": "bifit.optimization.single_experiment.base_optimizer", "qualname": "OptimizerResult.message", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;Optimization has not been attempted.&#x27;"}, {"fullname": "bifit.optimization.single_experiment.base_optimizer.OptimizerResult.func", "modulename": "bifit.optimization.single_experiment.base_optimizer", "qualname": "OptimizerResult.func", "kind": "variable", "doc": "<p></p>\n", "default_value": "None"}, {"fullname": "bifit.optimization.single_experiment.base_optimizer.OptimizerResult.jac", "modulename": "bifit.optimization.single_experiment.base_optimizer", "qualname": "OptimizerResult.jac", "kind": "variable", "doc": "<p></p>\n", "default_value": "None"}, {"fullname": "bifit.optimization.single_experiment.base_optimizer.OptimizerResult.hess", "modulename": "bifit.optimization.single_experiment.base_optimizer", "qualname": "OptimizerResult.hess", "kind": "variable", "doc": "<p></p>\n", "default_value": "None"}, {"fullname": "bifit.optimization.single_experiment.base_optimizer.OptimizerResult.hess_inv", "modulename": "bifit.optimization.single_experiment.base_optimizer", "qualname": "OptimizerResult.hess_inv", "kind": "variable", "doc": "<p></p>\n", "default_value": "None"}, {"fullname": "bifit.optimization.single_experiment.base_optimizer.OptimizerResult.n_iters", "modulename": "bifit.optimization.single_experiment.base_optimizer", "qualname": "OptimizerResult.n_iters", "kind": "variable", "doc": "<p></p>\n", "default_value": "0"}, {"fullname": "bifit.optimization.single_experiment.base_optimizer.OptimizerResult.max_cv", "modulename": "bifit.optimization.single_experiment.base_optimizer", "qualname": "OptimizerResult.max_cv", "kind": "variable", "doc": "<p></p>\n", "default_value": "inf"}, {"fullname": "bifit.optimization.single_experiment.base_optimizer.OptimizerResult.level_functions", "modulename": "bifit.optimization.single_experiment.base_optimizer", "qualname": "OptimizerResult.level_functions", "kind": "variable", "doc": "<p></p>\n", "default_value": "None"}, {"fullname": "bifit.optimization.single_experiment.gauss_newton_method", "modulename": "bifit.optimization.single_experiment.gauss_newton_method", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "bifit.optimization.single_experiment.gauss_newton_method.GeneralizedGaussNewton", "modulename": "bifit.optimization.single_experiment.gauss_newton_method", "qualname": "GeneralizedGaussNewton", "kind": "class", "doc": "<p>Generalized Gauss-Newton method for constrained optimization.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>objective (callable):</strong>  Objective function.</li>\n<li><strong>constraints (Union[list, dict]):</strong>  Dictionary containing the equality and inequality constraints.</li>\n<li><strong>x0 (np.ndarray):</strong>  Initial guess.</li>\n<li><strong>tol (float, optional):</strong>  Tolerance for convergence. Defaults to 1e-8.</li>\n<li><strong>max_iters (int, optional):</strong>  Maximum number of iterations. Defaults to 100.</li>\n<li><strong>active_iters (int, optional):</strong>  Maximum iterations for active set strategy. Defaults to 50.</li>\n<li><strong>zero (float, optional):</strong>  Threshold for zero. Defaults to 1e-6.</li>\n</ul>\n"}, {"fullname": "bifit.optimization.single_experiment.gauss_newton_method.GeneralizedGaussNewton.__init__", "modulename": "bifit.optimization.single_experiment.gauss_newton_method", "qualname": "GeneralizedGaussNewton.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">objective</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"nb\">callable</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">constraints</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">x0</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">tol</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">1e-08</span>,</span><span class=\"param\">\t<span class=\"n\">max_iters</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">100</span>,</span><span class=\"param\">\t<span class=\"n\">active_iters</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">50</span>,</span><span class=\"param\">\t<span class=\"n\">zero</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">1e-06</span></span>)</span>"}, {"fullname": "bifit.optimization.single_experiment.gauss_newton_method.GeneralizedGaussNewton.f1_func", "modulename": "bifit.optimization.single_experiment.gauss_newton_method", "qualname": "GeneralizedGaussNewton.f1_func", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.optimization.single_experiment.gauss_newton_method.GeneralizedGaussNewton.f2_func", "modulename": "bifit.optimization.single_experiment.gauss_newton_method", "qualname": "GeneralizedGaussNewton.f2_func", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.optimization.single_experiment.gauss_newton_method.GeneralizedGaussNewton.f3_func", "modulename": "bifit.optimization.single_experiment.gauss_newton_method", "qualname": "GeneralizedGaussNewton.f3_func", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.optimization.single_experiment.gauss_newton_method.GeneralizedGaussNewton.j1_func", "modulename": "bifit.optimization.single_experiment.gauss_newton_method", "qualname": "GeneralizedGaussNewton.j1_func", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.optimization.single_experiment.gauss_newton_method.GeneralizedGaussNewton.j2_func", "modulename": "bifit.optimization.single_experiment.gauss_newton_method", "qualname": "GeneralizedGaussNewton.j2_func", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.optimization.single_experiment.gauss_newton_method.GeneralizedGaussNewton.j3_func", "modulename": "bifit.optimization.single_experiment.gauss_newton_method", "qualname": "GeneralizedGaussNewton.j3_func", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.optimization.single_experiment.gauss_newton_method.GeneralizedGaussNewton.result", "modulename": "bifit.optimization.single_experiment.gauss_newton_method", "qualname": "GeneralizedGaussNewton.result", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.optimization.single_experiment.gauss_newton_method.GeneralizedGaussNewton.adjoint_variables", "modulename": "bifit.optimization.single_experiment.gauss_newton_method", "qualname": "GeneralizedGaussNewton.adjoint_variables", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.optimization.single_experiment.gauss_newton_method.GeneralizedGaussNewton.x0", "modulename": "bifit.optimization.single_experiment.gauss_newton_method", "qualname": "GeneralizedGaussNewton.x0", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.optimization.single_experiment.gauss_newton_method.GeneralizedGaussNewton.tol", "modulename": "bifit.optimization.single_experiment.gauss_newton_method", "qualname": "GeneralizedGaussNewton.tol", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.optimization.single_experiment.gauss_newton_method.GeneralizedGaussNewton.max_iters", "modulename": "bifit.optimization.single_experiment.gauss_newton_method", "qualname": "GeneralizedGaussNewton.max_iters", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.optimization.single_experiment.gauss_newton_method.GeneralizedGaussNewton.active_iters", "modulename": "bifit.optimization.single_experiment.gauss_newton_method", "qualname": "GeneralizedGaussNewton.active_iters", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.optimization.single_experiment.gauss_newton_method.GeneralizedGaussNewton.zero", "modulename": "bifit.optimization.single_experiment.gauss_newton_method", "qualname": "GeneralizedGaussNewton.zero", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.optimization.single_experiment.gauss_newton_method.GeneralizedGaussNewton.minimize", "modulename": "bifit.optimization.single_experiment.gauss_newton_method", "qualname": "GeneralizedGaussNewton.minimize", "kind": "function", "doc": "<p>Solve the optimization problem.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bifit.optimization.single_experiment.gauss_newton_method.GeneralizedGaussNewton.check_feasibility", "modulename": "bifit.optimization.single_experiment.gauss_newton_method", "qualname": "GeneralizedGaussNewton.check_feasibility", "kind": "function", "doc": "<p>Measure feasibility of the linearization at the current solution.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>dy (np.ndarray):</strong>  Step direction.</li>\n<li><strong>sol (dict):</strong>  Dictionary containing the current solution.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>float: Constraint violation.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dy</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">sol</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "bifit.optimization.single_experiment.gauss_newton_method.GeneralizedGaussNewton.get_feasible_point", "modulename": "bifit.optimization.single_experiment.gauss_newton_method", "qualname": "GeneralizedGaussNewton.get_feasible_point", "kind": "function", "doc": "<p>Get a feasible solution starting from the initial guess.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>sol (dict):</strong>  Dictionary containing the current solution.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>np.ndarray: Feasible solution.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">sol</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "bifit.optimization.single_experiment.gauss_newton_method.GeneralizedGaussNewton.values_of_inactive_constraints", "modulename": "bifit.optimization.single_experiment.gauss_newton_method", "qualname": "GeneralizedGaussNewton.values_of_inactive_constraints", "kind": "function", "doc": "<p>Compute linearization of inactive inequality constraints.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>dx (np.ndarray):</strong>  Step direction.</li>\n<li><strong>sol (dict):</strong>  Dictionary containing the current solution.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>np.ndarray: Linearized constraints.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dx</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">sol</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "bifit.optimization.single_experiment.gauss_newton_method.GeneralizedGaussNewton.active_set_strategy", "modulename": "bifit.optimization.single_experiment.gauss_newton_method", "qualname": "GeneralizedGaussNewton.active_set_strategy", "kind": "function", "doc": "<p>Active set strategy for solving inequality-constrained optimization.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>sol (dict):</strong>  Dictionary containing the current solution.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>np.ndarray: Step direction.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">sol</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "bifit.optimization.single_experiment.gauss_newton_method.GeneralizedGaussNewton.compute_adjoint_variables", "modulename": "bifit.optimization.single_experiment.gauss_newton_method", "qualname": "GeneralizedGaussNewton.compute_adjoint_variables", "kind": "function", "doc": "<p>Compute adjoint variables for equality and inequality constraints.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>dx (np.ndarray):</strong>  Step direction.</li>\n<li><strong>sol (dict):</strong>  Dictionary containing the current solution.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dx</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">sol</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bifit.optimization.single_experiment.gauss_newton_method.GeneralizedGaussNewton.level_function", "modulename": "bifit.optimization.single_experiment.gauss_newton_method", "qualname": "GeneralizedGaussNewton.level_function", "kind": "function", "doc": "<p>Compute the value of the level function.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x (np.ndarray):</strong>  Solution value.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>float: Value of the level function.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "bifit.optimization.single_experiment.gauss_newton_method.GeneralizedGaussNewton.where_zero", "modulename": "bifit.optimization.single_experiment.gauss_newton_method", "qualname": "GeneralizedGaussNewton.where_zero", "kind": "function", "doc": "<p>Return indices of x where x is zero.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x (np.ndarray):</strong>  Input array.</li>\n<li><strong>tol (float, optional):</strong>  Tolerance for zero. Defaults to 1e-6.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>np.ndarray: Indices of x where x is almost zero.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">tol</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">1e-06</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "bifit.optimization.single_experiment.gauss_newton_method.GeneralizedGaussNewton.where_positive", "modulename": "bifit.optimization.single_experiment.gauss_newton_method", "qualname": "GeneralizedGaussNewton.where_positive", "kind": "function", "doc": "<p>Return indices of x where x is positive.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x (np.ndarray):</strong>  Input array.</li>\n<li><strong>tol (float, optional):</strong>  Tolerance for zero. Defaults to 1e-6.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>np.ndarray: Indices of x where x is positive.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">tol</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">1e-06</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "bifit.optimization.single_experiment.gauss_newton_method.GeneralizedGaussNewton.where_negative", "modulename": "bifit.optimization.single_experiment.gauss_newton_method", "qualname": "GeneralizedGaussNewton.where_negative", "kind": "function", "doc": "<p>Return indices of x where x is negative.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x (np.ndarray):</strong>  Input array.</li>\n<li><strong>tol (float, optional):</strong>  Precision for negative. Defaults to 1e-6.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>np.ndarray: Indices of x where x is negative.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">tol</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">1e-06</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "bifit.optimization.single_experiment.gauss_newton_optimizer", "modulename": "bifit.optimization.single_experiment.gauss_newton_optimizer", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "bifit.optimization.single_experiment.gauss_newton_optimizer.GaussNewtonOptimizer", "modulename": "bifit.optimization.single_experiment.gauss_newton_optimizer", "qualname": "GaussNewtonOptimizer", "kind": "class", "doc": "<p>Use the in-house Gauss-Newton implementation to solve the optimization problem.</p>\n", "bases": "bifit.optimization.single_experiment.base_optimizer.BaseOptimizer"}, {"fullname": "bifit.optimization.single_experiment.gauss_newton_optimizer.GaussNewtonOptimizer.__init__", "modulename": "bifit.optimization.single_experiment.gauss_newton_optimizer", "qualname": "GaussNewtonOptimizer.__init__", "kind": "function", "doc": "<p>Initialize the optimizer.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>objective (callable):</strong>  Objective function to minimize.</li>\n<li><strong>x0 (np.ndarray):</strong>  Initial guess.</li>\n<li><strong>lb (Union[np.ndarray, list[float]], optional):</strong>  Lower bounds. Defaults to None.</li>\n<li><strong>ub (Union[np.ndarray, list[float]], optional):</strong>  Upper bounds. Defaults to None.</li>\n<li><strong>constraints (dict, optional):</strong>  Constraints. Defaults to None.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>ValueError:</strong>  If lower bounds and upper bounds have different lengths.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">objective</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"nb\">callable</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">x0</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">lb</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">ub</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">constraints</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "bifit.optimization.single_experiment.gauss_newton_optimizer.GaussNewtonOptimizer.x0", "modulename": "bifit.optimization.single_experiment.gauss_newton_optimizer", "qualname": "GaussNewtonOptimizer.x0", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.optimization.single_experiment.gauss_newton_optimizer.GaussNewtonOptimizer.objective", "modulename": "bifit.optimization.single_experiment.gauss_newton_optimizer", "qualname": "GaussNewtonOptimizer.objective", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.optimization.single_experiment.gauss_newton_optimizer.GaussNewtonOptimizer.constraints", "modulename": "bifit.optimization.single_experiment.gauss_newton_optimizer", "qualname": "GaussNewtonOptimizer.constraints", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.optimization.single_experiment.gauss_newton_optimizer.GaussNewtonOptimizer.options", "modulename": "bifit.optimization.single_experiment.gauss_newton_optimizer", "qualname": "GaussNewtonOptimizer.options", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.optimization.single_experiment.gauss_newton_optimizer.GaussNewtonOptimizer.minimize", "modulename": "bifit.optimization.single_experiment.gauss_newton_optimizer", "qualname": "GaussNewtonOptimizer.minimize", "kind": "function", "doc": "<p>Minimize the objective function subject to bounds and constraints.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>method (str, optional):</strong>  For consistency, non-functional for GaussNewton. Defaults to None.</li>\n<li><strong>options (dict, optional):</strong>  Solver options. Defaults to None.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">method</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">options</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bifit.optimization.single_experiment.scipy_optimizer", "modulename": "bifit.optimization.single_experiment.scipy_optimizer", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "bifit.optimization.single_experiment.scipy_optimizer.ScipyOptimizer", "modulename": "bifit.optimization.single_experiment.scipy_optimizer", "qualname": "ScipyOptimizer", "kind": "class", "doc": "<p>Use one of the SciPy optimizers to solve the optimization problem.</p>\n\n<p>Find details on the optimizer and configuration options at: <code>scipy.optimize.minimize()</code>.</p>\n", "bases": "bifit.optimization.single_experiment.base_optimizer.BaseOptimizer"}, {"fullname": "bifit.optimization.single_experiment.scipy_optimizer.ScipyOptimizer.__init__", "modulename": "bifit.optimization.single_experiment.scipy_optimizer", "qualname": "ScipyOptimizer.__init__", "kind": "function", "doc": "<p>Initialize the optimizer.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>objective (callable):</strong>  Objective function to minimize.</li>\n<li><strong>x0 (np.ndarray):</strong>  Initial guess.</li>\n<li><strong>lb (Union[np.ndarray, List[float]], optional):</strong>  Lower bounds. Defaults to None.</li>\n<li><strong>ub (Union[np.ndarray, List[float]], optional):</strong>  Upper bounds. Defaults to None.</li>\n<li><strong>constraints (dict, optional):</strong>  Constraints. Defaults to None.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">objective</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"nb\">callable</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">x0</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">lb</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">ub</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">constraints</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "bifit.optimization.single_experiment.scipy_optimizer.ScipyOptimizer.x0", "modulename": "bifit.optimization.single_experiment.scipy_optimizer", "qualname": "ScipyOptimizer.x0", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.optimization.single_experiment.scipy_optimizer.ScipyOptimizer.objective", "modulename": "bifit.optimization.single_experiment.scipy_optimizer", "qualname": "ScipyOptimizer.objective", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.optimization.single_experiment.scipy_optimizer.ScipyOptimizer.constraints", "modulename": "bifit.optimization.single_experiment.scipy_optimizer", "qualname": "ScipyOptimizer.constraints", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.optimization.single_experiment.scipy_optimizer.ScipyOptimizer.bounds", "modulename": "bifit.optimization.single_experiment.scipy_optimizer", "qualname": "ScipyOptimizer.bounds", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.optimization.single_experiment.scipy_optimizer.ScipyOptimizer.options", "modulename": "bifit.optimization.single_experiment.scipy_optimizer", "qualname": "ScipyOptimizer.options", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.optimization.single_experiment.scipy_optimizer.ScipyOptimizer.is_least_squares", "modulename": "bifit.optimization.single_experiment.scipy_optimizer", "qualname": "ScipyOptimizer.is_least_squares", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.optimization.single_experiment.scipy_optimizer.ScipyOptimizer.minimize", "modulename": "bifit.optimization.single_experiment.scipy_optimizer", "qualname": "ScipyOptimizer.minimize", "kind": "function", "doc": "<p>Minimize the objective function subject to bounds and constraints.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>method (str, optional):</strong>  SciPy optimization method. Defaults to None.</li>\n<li><strong>options (dict, optional):</strong>  Solver options. Defaults to None.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">method</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">options</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bifit.optimization.single_experiment.select_optimizer", "modulename": "bifit.optimization.single_experiment.select_optimizer", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "bifit.optimization.single_experiment.select_optimizer.import_optimizer", "modulename": "bifit.optimization.single_experiment.select_optimizer", "qualname": "import_optimizer", "kind": "function", "doc": "<p>Return a single experiment optimizer.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>optimizer (str):</strong>  Name of the optimization method.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>object: Optimizer object.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>ValueError:</strong>  If the optimizer name is unknown.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">optimizer</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bifit.parameter_estimation", "modulename": "bifit.parameter_estimation", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "bifit.parameter_estimation.initial_guess", "modulename": "bifit.parameter_estimation.initial_guess", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "bifit.parameter_estimation.initial_guess.InitialGuessGenerator", "modulename": "bifit.parameter_estimation.initial_guess", "qualname": "InitialGuessGenerator", "kind": "class", "doc": "<p>Generates initial guesses for the parameter estimation problem.</p>\n"}, {"fullname": "bifit.parameter_estimation.initial_guess.InitialGuessGenerator.__init__", "modulename": "bifit.parameter_estimation.initial_guess", "qualname": "InitialGuessGenerator.__init__", "kind": "function", "doc": "<p>Initializes the initial guess generator.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "bifit.parameter_estimation.initial_guess.InitialGuessGenerator.model", "modulename": "bifit.parameter_estimation.initial_guess", "qualname": "InitialGuessGenerator.model", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.parameter_estimation.initial_guess.InitialGuessGenerator.branches", "modulename": "bifit.parameter_estimation.initial_guess", "qualname": "InitialGuessGenerator.branches", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.parameter_estimation.initial_guess.InitialGuessGenerator.generate_initial_guess", "modulename": "bifit.parameter_estimation.initial_guess", "qualname": "InitialGuessGenerator.generate_initial_guess", "kind": "function", "doc": "<p>Generates initial guesses for the parameter estimation problem.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>model (object):</strong>  Details of the model.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>RuntimeError:</strong>  If initial guess generation fails.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"nb\">object</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bifit.parameter_estimation.parameter_estimator", "modulename": "bifit.parameter_estimation.parameter_estimator", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "bifit.parameter_estimation.parameter_estimator.ParameterEstimator", "modulename": "bifit.parameter_estimation.parameter_estimator", "qualname": "ParameterEstimator", "kind": "class", "doc": "<p>Solves the multi-experiment parameter estimation problem.</p>\n"}, {"fullname": "bifit.parameter_estimation.parameter_estimator.ParameterEstimator.__init__", "modulename": "bifit.parameter_estimation.parameter_estimator", "qualname": "ParameterEstimator.__init__", "kind": "function", "doc": "<p>Initializes the parameter estimator.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x0 (np.ndarray):</strong>  Initial guess.</li>\n<li><strong>model (object):</strong>  Details of the model.</li>\n<li><strong>method (str):</strong>  Approach to solve the problem. Defaults to \"osqp\".</li>\n<li><strong>xtol (float):</strong>  Convergence threshold for step size. Defaults to 1e-4.</li>\n<li><strong>ftol (float):</strong>  Convergence threshold for function value. Defaults to 1e-4.</li>\n<li><strong>max_iters (int):</strong>  Maximum number of iterations. Defaults to 100.</li>\n<li><strong>plot_iters (bool):</strong>  Whether to plot the level function at each iteration. Defaults to False.</li>\n<li><strong>compute_ci (bool):</strong>  Whether to compute confidence intervals. Defaults to False.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">x0</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"nb\">object</span>,</span><span class=\"param\">\t<span class=\"n\">method</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;osqp&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">xtol</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0001</span>,</span><span class=\"param\">\t<span class=\"n\">ftol</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0001</span>,</span><span class=\"param\">\t<span class=\"n\">max_iters</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">100</span>,</span><span class=\"param\">\t<span class=\"n\">plot_iters</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">compute_ci</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span>)</span>"}, {"fullname": "bifit.parameter_estimation.parameter_estimator.ParameterEstimator.x0", "modulename": "bifit.parameter_estimation.parameter_estimator", "qualname": "ParameterEstimator.x0", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.parameter_estimation.parameter_estimator.ParameterEstimator.model", "modulename": "bifit.parameter_estimation.parameter_estimator", "qualname": "ParameterEstimator.model", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.parameter_estimation.parameter_estimator.ParameterEstimator.xtol", "modulename": "bifit.parameter_estimation.parameter_estimator", "qualname": "ParameterEstimator.xtol", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.parameter_estimation.parameter_estimator.ParameterEstimator.ftol", "modulename": "bifit.parameter_estimation.parameter_estimator", "qualname": "ParameterEstimator.ftol", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.parameter_estimation.parameter_estimator.ParameterEstimator.max_iters", "modulename": "bifit.parameter_estimation.parameter_estimator", "qualname": "ParameterEstimator.max_iters", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.parameter_estimation.parameter_estimator.ParameterEstimator.plot_iters", "modulename": "bifit.parameter_estimation.parameter_estimator", "qualname": "ParameterEstimator.plot_iters", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.parameter_estimation.parameter_estimator.ParameterEstimator.compute_ci", "modulename": "bifit.parameter_estimation.parameter_estimator", "qualname": "ParameterEstimator.compute_ci", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.parameter_estimation.parameter_estimator.ParameterEstimator.method", "modulename": "bifit.parameter_estimation.parameter_estimator", "qualname": "ParameterEstimator.method", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.parameter_estimation.parameter_estimator.ParameterEstimator.n_experiments", "modulename": "bifit.parameter_estimation.parameter_estimator", "qualname": "ParameterEstimator.n_experiments", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.parameter_estimation.parameter_estimator.ParameterEstimator.n_observables", "modulename": "bifit.parameter_estimation.parameter_estimator", "qualname": "ParameterEstimator.n_observables", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.parameter_estimation.parameter_estimator.ParameterEstimator.n_global", "modulename": "bifit.parameter_estimation.parameter_estimator", "qualname": "ParameterEstimator.n_global", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.parameter_estimation.parameter_estimator.ParameterEstimator.n_local", "modulename": "bifit.parameter_estimation.parameter_estimator", "qualname": "ParameterEstimator.n_local", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.parameter_estimation.parameter_estimator.ParameterEstimator.problem", "modulename": "bifit.parameter_estimation.parameter_estimator", "qualname": "ParameterEstimator.problem", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.parameter_estimation.parameter_estimator.ParameterEstimator.equality_constraints", "modulename": "bifit.parameter_estimation.parameter_estimator", "qualname": "ParameterEstimator.equality_constraints", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.parameter_estimation.parameter_estimator.ParameterEstimator.Solver", "modulename": "bifit.parameter_estimation.parameter_estimator", "qualname": "ParameterEstimator.Solver", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.parameter_estimation.parameter_estimator.ParameterEstimator.result", "modulename": "bifit.parameter_estimation.parameter_estimator", "qualname": "ParameterEstimator.result", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.parameter_estimation.parameter_estimator.ParameterEstimator.objective_function", "modulename": "bifit.parameter_estimation.parameter_estimator", "qualname": "ParameterEstimator.objective_function", "kind": "function", "doc": "<p>Computes the objective function for the parameter estimation problem.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x (np.ndarray):</strong>  Solution vector.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>np.ndarray: Residuals.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "bifit.parameter_estimation.problem_generator", "modulename": "bifit.parameter_estimation.problem_generator", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "bifit.parameter_estimation.problem_generator.OptimizationProblemGenerator", "modulename": "bifit.parameter_estimation.problem_generator", "qualname": "OptimizationProblemGenerator", "kind": "class", "doc": "<p>Defines all the subproblems of the parameter estimation problem.</p>\n"}, {"fullname": "bifit.parameter_estimation.problem_generator.OptimizationProblemGenerator.__init__", "modulename": "bifit.parameter_estimation.problem_generator", "qualname": "OptimizationProblemGenerator.__init__", "kind": "function", "doc": "<p>Initializes the class.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>model (object):</strong>  Details of the model.</li>\n<li><strong>include_steady_state (bool):</strong>  Whether to include steady state condition.</li>\n<li><strong>include_singularity (bool):</strong>  Whether to include singularity condition.</li>\n<li><strong>include_normalization (bool):</strong>  Whether to include normalization condition.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"nb\">object</span>,</span><span class=\"param\">\t<span class=\"n\">include_steady_state</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">include_singularity</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">include_normalization</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span>)</span>"}, {"fullname": "bifit.parameter_estimation.problem_generator.OptimizationProblemGenerator.model", "modulename": "bifit.parameter_estimation.problem_generator", "qualname": "OptimizationProblemGenerator.model", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.parameter_estimation.problem_generator.OptimizationProblemGenerator.rhs_", "modulename": "bifit.parameter_estimation.problem_generator", "qualname": "OptimizationProblemGenerator.rhs_", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.parameter_estimation.problem_generator.OptimizationProblemGenerator.jacobian_", "modulename": "bifit.parameter_estimation.problem_generator", "qualname": "OptimizationProblemGenerator.jacobian_", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.parameter_estimation.problem_generator.OptimizationProblemGenerator.type_", "modulename": "bifit.parameter_estimation.problem_generator", "qualname": "OptimizationProblemGenerator.type_", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.parameter_estimation.problem_generator.OptimizationProblemGenerator.include_steady_state", "modulename": "bifit.parameter_estimation.problem_generator", "qualname": "OptimizationProblemGenerator.include_steady_state", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.parameter_estimation.problem_generator.OptimizationProblemGenerator.include_singularity", "modulename": "bifit.parameter_estimation.problem_generator", "qualname": "OptimizationProblemGenerator.include_singularity", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.parameter_estimation.problem_generator.OptimizationProblemGenerator.include_normalization", "modulename": "bifit.parameter_estimation.problem_generator", "qualname": "OptimizationProblemGenerator.include_normalization", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.parameter_estimation.problem_generator.OptimizationProblemGenerator.stack_functions", "modulename": "bifit.parameter_estimation.problem_generator", "qualname": "OptimizationProblemGenerator.stack_functions", "kind": "function", "doc": "<p>Stacks the given functions.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x (np.ndarray):</strong>  Solution vector.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>np.ndarray: Stacked vector.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bifit.parameter_estimation.problem_generator.OptimizationProblemGenerator.steady_state_condition", "modulename": "bifit.parameter_estimation.problem_generator", "qualname": "OptimizationProblemGenerator.steady_state_condition", "kind": "function", "doc": "<p>Computes the steady state condition of the bifurcation point.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x (np.ndarray):</strong>  Solution vector.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>np.ndarray: Residuals.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bifit.parameter_estimation.problem_generator.OptimizationProblemGenerator.singularity_condition", "modulename": "bifit.parameter_estimation.problem_generator", "qualname": "OptimizationProblemGenerator.singularity_condition", "kind": "function", "doc": "<p>Computes the singularity condition for the bifurcation point.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x (np.ndarray):</strong>  Solution vector.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>np.ndarray: Residuals.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>ValueError:</strong>  If the bifurcation type is unrecognized.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bifit.parameter_estimation.problem_generator.OptimizationProblemGenerator.normalization_condition", "modulename": "bifit.parameter_estimation.problem_generator", "qualname": "OptimizationProblemGenerator.normalization_condition", "kind": "function", "doc": "<p>Computes the normalization condition of the bifurcation point.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x (np.ndarray):</strong>  Solution vector.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>np.ndarray: Residuals.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>ValueError:</strong>  If the bifurcation type is unrecognized.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bifit.parameter_estimation.results", "modulename": "bifit.parameter_estimation.results", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "bifit.parameter_estimation.results.get_results", "modulename": "bifit.parameter_estimation.results", "qualname": "get_results", "kind": "function", "doc": "<p>Get a summary of the parameter estimation results.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>model (object):</strong>  Model object containing details of the system.</li>\n<li><strong>res (object, optional):</strong>  Parameter estimation results. Defaults to None.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>dict: A dictionary containing the results summary.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"nb\">object</span>, </span><span class=\"param\"><span class=\"n\">res</span><span class=\"p\">:</span> <span class=\"nb\">object</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bifit.parser", "modulename": "bifit.parser", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "bifit.parser.yaml_parser", "modulename": "bifit.parser.yaml_parser", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "bifit.parser.yaml_parser.YamlParser", "modulename": "bifit.parser.yaml_parser", "qualname": "YamlParser", "kind": "class", "doc": "<p>A class to parse YAML files and extract problem specifications.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>meta_params_path (str):</strong>  Path to the meta parameters YAML file.</li>\n<li><strong>meta_parameters (dict):</strong>  Parsed meta parameters.</li>\n<li><strong>specifications (ProblemSpecifications):</strong>  Parsed problem specifications.</li>\n</ul>\n"}, {"fullname": "bifit.parser.yaml_parser.YamlParser.__init__", "modulename": "bifit.parser.yaml_parser", "qualname": "YamlParser.__init__", "kind": "function", "doc": "<p>Initializes the YamlParser with the file paths.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>file_path (str):</strong>  The base path to the YAML files.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file_path</span></span>)</span>"}, {"fullname": "bifit.parser.yaml_parser.YamlParser.meta_params_path", "modulename": "bifit.parser.yaml_parser", "qualname": "YamlParser.meta_params_path", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.parser.yaml_parser.YamlParser.meta_parameters", "modulename": "bifit.parser.yaml_parser", "qualname": "YamlParser.meta_parameters", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.parser.yaml_parser.YamlParser.specifications", "modulename": "bifit.parser.yaml_parser", "qualname": "YamlParser.specifications", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bifit.parser.yaml_parser.YamlParser.get_problem_specifications", "modulename": "bifit.parser.yaml_parser", "qualname": "YamlParser.get_problem_specifications", "kind": "function", "doc": "<p>Retrieves all the problem specifications from the relevant YAML files.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>ProblemSpecifications: The problem specifications.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bifit.preprocessing", "modulename": "bifit.preprocessing", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "bifit.preprocessing.preprocess_data", "modulename": "bifit.preprocessing.preprocess_data", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "bifit.preprocessing.preprocess_data.rng", "modulename": "bifit.preprocessing.preprocess_data", "qualname": "rng", "kind": "variable", "doc": "<p></p>\n", "default_value": "Generator(PCG64) at 0x2B21099E500"}, {"fullname": "bifit.preprocessing.preprocess_data.DataPreprocessor", "modulename": "bifit.preprocessing.preprocess_data", "qualname": "DataPreprocessor", "kind": "class", "doc": "<p>A class to preprocess measurement data.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>_data (pd.DataFrame or list):</strong>  The measurement data.</li>\n<li><strong>_weights (list):</strong>  The weights associated with the data.</li>\n</ul>\n"}, {"fullname": "bifit.preprocessing.preprocess_data.DataPreprocessor.__init__", "modulename": "bifit.preprocessing.preprocess_data", "qualname": "DataPreprocessor.__init__", "kind": "function", "doc": "<p>Initializes the DataPreprocessor with default values.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "bifit.preprocessing.preprocess_data.DataPreprocessor.load_the_data", "modulename": "bifit.preprocessing.preprocess_data", "qualname": "DataPreprocessor.load_the_data", "kind": "function", "doc": "<p>Loads the measurement data from a file.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>file_path (str):</strong>  The path to the data file.</li>\n<li><strong>error_scale (float):</strong>  The scale of the measurement error.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">file_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">error_scale</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.05</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bifit.preprocessing.preprocess_data.DataPreprocessor.load_the_data_and_add_noise", "modulename": "bifit.preprocessing.preprocess_data", "qualname": "DataPreprocessor.load_the_data_and_add_noise", "kind": "function", "doc": "<p>Loads the measurement data from a file and adds noise to the data.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>file_path (str):</strong>  The path to the data file.</li>\n<li><strong>error_scale (float):</strong>  The scale of the measurement error.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">file_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">error_scale</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.05</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bifit.preprocessing.preprocess_data.DataPreprocessor.select_subset_of_data", "modulename": "bifit.preprocessing.preprocess_data", "qualname": "DataPreprocessor.select_subset_of_data", "kind": "function", "doc": "<p>Filters out a subset of the measurement data.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>length (int):</strong>  The number of data points to be selected.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>Exception:</strong>  If the data is not a list or pandas DataFrame.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">length</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bifit.preprocessing.preprocess_data.DataPreprocessor.data", "modulename": "bifit.preprocessing.preprocess_data", "qualname": "DataPreprocessor.data", "kind": "variable", "doc": "<p>Gets the processed data.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>pd.DataFrame or list: The processed data.</p>\n</blockquote>\n"}, {"fullname": "bifit.preprocessing.preprocess_data.DataPreprocessor.weights", "modulename": "bifit.preprocessing.preprocess_data", "qualname": "DataPreprocessor.weights", "kind": "variable", "doc": "<p>Gets the weights associated with the data.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>list: The weights associated with the data.</p>\n</blockquote>\n"}, {"fullname": "bifit.preprocessing.sampler", "modulename": "bifit.preprocessing.sampler", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "bifit.preprocessing.sampler.generate_samples_using_lhs", "modulename": "bifit.preprocessing.sampler", "qualname": "generate_samples_using_lhs", "kind": "function", "doc": "<p>Generates parameter samples using Latin Hypercube Sampling.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>parameters (dict):</strong>  Dictionary of parameters.</li>\n<li><strong>bounds (dict):</strong>  Dictionary of bounds for the parameters.</li>\n<li><strong>n_points (int):</strong>  Number of points to generate.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>np.ndarray: Scaled samples.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">parameters</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>, </span><span class=\"param\"><span class=\"n\">bounds</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>, </span><span class=\"param\"><span class=\"n\">n_points</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">100</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bifit.preprocessing.sampler.generate_samples_using_gaussian", "modulename": "bifit.preprocessing.sampler", "qualname": "generate_samples_using_gaussian", "kind": "function", "doc": "<p>Generates parameter samples using a Gaussian distribution.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>parameters (dict):</strong>  Dictionary of parameters.</li>\n<li><strong>to_vary (list):</strong>  List of parameters to vary.</li>\n<li><strong>noise (float):</strong>  Noise level.</li>\n<li><strong>n_points (int):</strong>  Number of points to generate.</li>\n<li><strong>truncated (bool):</strong>  Whether to generate truncated normal random variables.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>np.ndarray: Samples.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">parameters</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">to_vary</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">noise</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">n_points</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">100</span>,</span><span class=\"param\">\t<span class=\"n\">truncated</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();